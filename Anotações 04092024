#STRINGS:
- o tipo str armazena qualquer tipo de dado. É uma cadeia de caracteres
- STRINGS SÃO IMUTÁVEIS!!!
# as strings não podem ser alteradas. já que o local de memória onde ela está armazenada não permite a alteração dela.
-- Usando a concatenação a gente pode CRIAR novas strings.
EX:
texto = "Alô mundo!"
texto = '@' + texto[1:]
print(texto) # escreve @lô mundo!
## porém não poderiamos fazer {texto[0] = '@'} pois daria um erro"
* Um vetor, por exemplo. É mutável

- MAAAS podemos transformar uma string em um vetor. A função list cria ela como uma lista(vetor)
xxxx.join - Transforma um dado mutável em um imutável (pode transformar um vetor em uma str)
Ex:
str = "".join(vetor) #ele concatena o vazio com um vetor e o transforma em uma string

- COMPARAÇÃO DE STRINGS:
* Lexicograficamente - Tamanho das letras (índice deles no próprio alfabeto)
    * a comparação deles se dá por coordenadas correspondentes.
    * maiúsculo vem ANTES de minúsculo, o que torna-os menores lexicograficamente

- FATIAMENTO:
* O fatiamento meio que pode criar algo com qualquer pedaço de uma string original. Realmente criando uma cópia de uma partezinha de um vetor (ou string vetorizada)
EX:
>>> nome = "Manoel Limeira de Lima Júnior"
>>> sobrenome = nome[7:14]
>>> sobrenome
'Limeira'
- A gente tbm consegue OMITIR índices. utilizando índices negativos. Utilizando valores negativos (como no for)
EX:
>>> nome[7:-1]
>>> nome
'Limeira de Lima Júnio'
>>> nome[-6:]
>>> nome
'Júnior'
>>> nome[:]
'Manoel Limeira de Lima Júnior'

MAAAS a gente ainda consegue utilizar um TERCEIRO incremento dentro do [:]. de forma [::]
EX:
>>> nome[::2]
'Mne ier eLm úir'
>>> nome[::-1]
'roinúJ amiL ed ariemiL leonaM'
-*-*-*-*-*-*ESTUDAR >>>>INCREMENTO<<<<!!!!-*-*-*-*-*-*-*-*-*-*-

- FUNÇÕES DE STRING:::::::::::;
>!> find(sub_string_procurada, pos_inicio, pos_fim) - Busca por um pedaço da string dentro dela. A função retornará onde encontrou o elemento
EX:
>>> nome = "Manoel Limeira de Lima Júnior"
>>> i = nome.find("Limeira")
>>> print(i)
7
>>> i = nome.find('a')
>>> print (i)
1 # Ele vai parar e retornar a primeira ocasião em que ele achar o elemento correspondente
CASO ELE NAO ENCONTRE, O PROGRAMA RETORNARÁ (-1)

>!>split - SubString separadora.
>!>replace(Substring_procurada, Substring_nova) - Substitui pedaços da string por uma nova. o retorno da função é uma cópia.
EX:
>>> nome.replace('a', '*')
'M*noel Limeir* de Lim* Júnior'
porém ele retorna uma CÓPIA. o valor de {nome} continua o mesmo, já que ele é imutável.
count(SubStringProcurada) - Retorna a quantidade de ocorrências que aparecem na string
>!> upper() - Retorna uma cópia da string, convertendo os valores minusculos por MAIUSCULOS
>!> lower() - Retorna uma cópia da string, convertendo os valores MAIÚSCULOS por minúsculos
>!> strip() - Retorna uma cópia da string, removendo os eventuais caracteres brancos do início e do final
EX:
>>> str_espaço = '     manoel      '
>>> str_espaço.strip()
'manoel'
>!> chr e ord:::
>!!!> ord - Retorna o ID em asciii decimal da string
>!!!> chr - Transforma o valor em decimal do ASCIII do elemento no próprio elemento
Ex:
>>> letra = 'l'
>>> print(ord(letra))
108
>>> print(ord(letra)-32)
76
>>> print(chr(ord(letra)-32))
L
*-*-*-*-*-*-*FUNÇÕES VERIFICADORAS EM STRING-*-*-*-*-*-*-*-:
>!> isalnum() - verifica se a string ~vazia e se todos os caracteres são letras, numeros ou uma combinação #espaço n vale
EX:
>>> str_espaço.strip().isalnum()
True

>!> isalpha() - verifica se todos sao letras, incluindo vogais acentuadas #num n vale
>!> isdigit() - Verifica se todos os elementos são apenas números
>!> islower() / isupper() - Verifica se todos os elementos são MAIUSCULOS ou minusculos
>!> isspace() - Verifica se a string possui apenas espacos em branco, como espaços, tabulações(TAB), quebras de linha ou retorno de carro.
EX:
>>> espaço = " \t\n "
>>> espaço.isspace()
True