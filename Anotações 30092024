-x-x-x-x-x-x-x-x-x-x-x-x-x-x-FUNÇÕES-x-x-x-x-x-x-x-x-x-x-x-x-x-x

- Funções podem ser utilizadas para organizar o código;

- Nesse caso, podemos criar e utilizar funções que podemos criar (com alguma definição)

- EX de funções:
    * type, len, int, float, print, input...

- Funções são códigos compartilhados.
- Definimos um nome e chamamos a função ao longo do programa

- Usamos >def< para definir função e >return< para devolver alguma coisa
    * Porém existem funções que não retornam nada.

-x-x-x-x-x-x-x-x-x-x-x-x-x-SINTAXE-x-x-x-x-x-x-x-x-x-x
>>> def nomeEscolhido(lista de parâmetros):
    suite do corpo da função
- A lista de parâmetros pode ter zero ou mais parametros, separado por vírgula.
- CUIDADO COM RETURN!

-x-x-x-x-x-x-x-x-x-x-x-x-x-SUBPROGRAMAS-x-x-x-x-x-x-x-x-x-x-x-x-x
- Nesse conceito, devemos criar a função antes do programa principal, isto é: temos que "declarar" a função antes de utilizarmos

-X-X-X-X--X-X-X-X-XX-X-X--X-X---X--X-X--X-X---X-X

PARÂMETROS DE FUNÇÕES:
- *args

- caso uma função precise receber um numero variável de parâmetros, pode-se utilizar o argumento (*args)
- esse, abre o escopo para a função, em que independentemente da quantidade de dados inseridos, ele funciona mesmo assim.

- *kwargs

- Neste, usa-se todos os itens de uma lista (ou de dentro da função, no caso)

- Funções Anônimas (lambda)

- funções que podem ser escritas em uma linha e não precisam definir um nome e muito menos o "def".
- EX:

>>> funcao_soma = lambda x, y: x+y
>>> print((lambda x, y: x+y)(6,7))